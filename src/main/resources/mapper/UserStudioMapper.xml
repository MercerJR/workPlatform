<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.workplatform.dao.UserStudioMapper">
    <resultMap id="BaseResultMap" type="com.project.workplatform.pojo.UserStudio">
        <!--@mbg.generated-->
        <!--@Table user_studio-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="studio_id" jdbcType="INTEGER" property="studioId"/>
        <result column="department_id" jdbcType="INTEGER" property="departmentId"/>
        <result column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="inside_alias" jdbcType="VARCHAR" property="insideAlias"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, user_id, studio_id, department_id, role_id, inside_alias
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from user_studio
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete from user_studio
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.project.workplatform.pojo.UserStudio"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into user_studio (user_id, studio_id, department_id,
        role_id, inside_alias)
        values (#{userId,jdbcType=INTEGER}, #{studioId,jdbcType=INTEGER}, #{departmentId,jdbcType=INTEGER},
        #{roleId,jdbcType=INTEGER}, #{insideAlias,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.project.workplatform.pojo.UserStudio" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into user_studio
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="studioId != null">
                studio_id,
            </if>
            <if test="departmentId != null">
                department_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="insideAlias != null">
                inside_alias,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="studioId != null">
                #{studioId,jdbcType=INTEGER},
            </if>
            <if test="departmentId != null">
                #{departmentId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="insideAlias != null">
                #{insideAlias,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.project.workplatform.pojo.UserStudio">
        <!--@mbg.generated-->
        update user_studio
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="studioId != null">
                studio_id = #{studioId,jdbcType=INTEGER},
            </if>
            <if test="departmentId != null">
                department_id = #{departmentId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="insideAlias != null">
                inside_alias = #{insideAlias,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.project.workplatform.pojo.UserStudio">
        <!--@mbg.generated-->
        update user_studio
        set user_id = #{userId,jdbcType=INTEGER},
        studio_id = #{studioId,jdbcType=INTEGER},
        department_id = #{departmentId,jdbcType=INTEGER},
        role_id = #{roleId,jdbcType=INTEGER},
        inside_alias = #{insideAlias,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByUserAndStudio" resultMap="BaseResultMap">
        select * from user_studio
        where user_id = #{userId} and studio_id = #{studioId}
    </select>
    <update id="updateDepartmentInfoByUserAndStudio">
        update user_studio
        set department_id = #{departmentId},role_id = #{roleId}
        where user_id = #{userId} and studio_id = #{studioId}
    </update>
    <select id="selectMemberNumberByStudio" resultType="java.lang.Integer">
        select count(*)
        from user_studio
        where studio_id = #{studioId}
    </select>
    <select id="selectSuperAdminNumberByStudio" resultType="java.lang.Integer">
        select count(*)
        from user_studio
        where studio_id = #{studioId} and role_id = 2
    </select>
    <select id="selectAdminNumberByStudio" resultType="java.lang.Integer">
        select count(*)
        from user_studio
        where studio_id = #{studioId} and role_id = 1
    </select>
    <select id="selectAdminByStudio"
            resultType="com.project.workplatform.data.response.studio.StudioAdminResponse">
        select us.user_id,us.studio_id,ifnull(us.inside_alias,ui.name) as insideAlias,sr.role,ui.phone_number,sd.department_name
        from user_studio as us inner join studio_role as sr inner join user_info as ui inner join studio_department as sd
        on us.role_id = sr.role_id and us.user_id = ui.user_id and us.department_id = sd.id
        where us.studio_id = #{studioId} and us.role_id = #{roleId}
    </select>
    <select id="selectAdminByStudioAndPhone"
            resultType="com.project.workplatform.data.response.studio.StudioAdminResponse">
        select us.user_id,us.studio_id,ifnull(us.inside_alias,ui.name) as insideAlias,sr.role,ui.phone_number,sd.department_name
        from user_studio as us inner join studio_role as sr inner join user_info as ui inner join studio_department as sd
        on us.role_id = sr.role_id and us.user_id = ui.user_id and us.department_id = sd.id
        where us.studio_id = #{studioId} and us.role_id = #{roleId} and ui.phone_number = #{phoneNumber}
    </select>
    <select id="selectAdminByStudioAndNameFuzzy"
            resultType="com.project.workplatform.data.response.studio.StudioAdminResponse">
        select us.user_id,us.studio_id,ifnull(us.inside_alias,ui.name) as insideAlias,sr.role,ui.phone_number,sd.department_name
        from user_studio as us inner join studio_role as sr inner join user_info as ui inner join studio_department as sd
        on us.role_id = sr.role_id and us.user_id = ui.user_id and us.department_id = sd.id
        where us.studio_id = #{studioId} and us.role_id = #{roleId} and
        ui.name like CONCAT(CONCAT('%', #{nameFuzzy}), '%')
    </select>
    <update id="updateRoleByUserAndStudio">
        update user_studio
        set role_id = #{roleId}
        where user_id = #{userId} and studio_id = #{studioId}
    </update>
    <select id="selectAdminByDepartmentNameFuzzy"
            resultType="com.project.workplatform.data.response.studio.StudioAdminResponse">
        select us.user_id,us.studio_id,ifnull(us.inside_alias,ui.name) as insideAlias,sr.role,ui.phone_number,sd.department_name
        from user_studio as us inner join studio_role as sr inner join user_info as ui inner join studio_department as sd
        on us.role_id = sr.role_id and us.user_id = ui.user_id and us.department_id = sd.id
        where us.studio_id = #{studioId} and us.role_id = #{roleId} and
        sd.department_name like CONCAT(CONCAT('%', #{departmentNameFuzzy}), '%')
    </select>
    <select id="selectLeaderNameByDepartment" resultType="java.lang.String">
        select ifnull(us.inside_alias,ui.name)
        from user_studio as us inner join studio_department as sd inner join user_info as ui
        on us.department_id = sd.id and us.user_id = ui.user_id
        where sd.id = #{departmentId} and us.role_id = 1;
    </select>
    <select id="selectMemberByDepartment"
            resultType="com.project.workplatform.data.response.studio.DepartmentMemberResponse">
        select us.user_id,ifnull(us.inside_alias,ui.name) as insideAlias,ui.phone_number,sd.department_name
        from user_studio as us inner join user_info as ui inner join studio_department as sd
        on us.user_id = ui.user_id and us.department_id = sd.id
        where us.department_id = #{departmentId}
    </select>
    <select id="selectByDepartmentId" resultMap="BaseResultMap">
        select * from user_studio
        where department_id = #{departmentId}
    </select>
</mapper>